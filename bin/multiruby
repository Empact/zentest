#!/usr/local/bin/ruby -w

require 'fileutils'

def run(cmd)
  puts "Running command: #{cmd}"
  raise "ERROR: Command failed with exit code #{$?}" unless system cmd
end

root_dir = File.expand_path(ENV['MULTIRUBY'] || File.join(ENV['HOME'], ".multiruby"))
unless test ?d, root_dir then
  puts "creating #{root_dir}"
  Dir.mkdir root_dir, 0700
end

versions = []
Dir.chdir root_dir do
  %w(build install versions).each do |dir|
    unless test ?d, dir then
      puts "creating #{dir}"
      Dir.mkdir dir 
      if dir == "versions" then
        file = "ruby-#{RUBY_VERSION}.tar.gz"
        puts "  downloading #{file} via HTTP... this might take a while."
        puts "  Put other ruby tarballs in versions to use them."
        
        Dir.chdir dir do
          require 'open-uri'
          open("http://ftp.ruby-lang.org/pub/ruby/#{file}") do |f|
            File.open file, 'w' do |out|
              out.write f.read
            end
          end
        end
      end
    end
  end

  Dir.chdir "build" do
    Dir["../versions/ruby*.tar.gz"].each do |tarball|
      build_dir = File.basename tarball, ".tar.gz"
      version = build_dir.sub(/^ruby-?/, '')
      versions << version
      inst_dir = "#{root_dir}/install/#{version}"
      unless test ?d, inst_dir then
        unless test ?d, build_dir then
          puts "creating #{inst_dir}"
          Dir.mkdir inst_dir
          puts "unpacking #{tarball}"
          system "tar zxf #{tarball}"
        end
        Dir.chdir build_dir do
          run "autoconf" unless test ?f, "configure"
          FileUtils.rm_r "ext/readline" if test ?d, "ext/readline"
          run "./configure --prefix #{inst_dir} &> log.configure"
          run "make -j4 &> log.build"
          run "make install &> log.install"
        end
      end
    end
  end
end

results = versions.map do |version|
  ruby = "#{root_dir}/install/#{version}/bin/ruby"
  puts
  puts "VERSION = #{version}"
  puts
  system ruby, *ARGV
  puts
  puts "RESULT = #{$?}"
  $?
end

exit results.select { |n| n != 0 }.size

