#!/usr/local/bin/ruby -w

# This script was inspired by Smalltalk's unit test integration.

require 'find'
require 'pp'
require 'set'

Dir.chdir File.join(File.dirname(__FILE__), '..')

files = {}

def run_tests(updated)
  test_types = map_file_names updated

  test_types.each do |tests|
    unless tests.empty? then
      puts "# Testing updated files: #{tests.join ' '}"
      cmd = "ruby -Ilib:test -e '#{tests.inspect}.each { |f| load f }'"
      results = `#{cmd}`
      puts results

      if results =~ / 0 failures, 0 errors\Z/ then
        puts '# Passed'
        next
      end

      failed = results.scan(/^\s+\d+\) (?:Failure|Error):\n(.*?)\((.*?)\)/)

      if failed.empty? then
        puts '# Test::Unit died'
        sleep 10
        retry
      end

      rerun_tests failed, tests

      puts '# All passed'
    end
  end
end

def map_file_names(updated)
  model_tests = []
  functional_tests = []

  updated.each do |filename|
    next if filename =~ /swp$/
    next if filename =~ /~$/

    filename.sub!(/^\.\//, '') # trim the ./ that Find gives us

    case filename
    when %r%^app/helpers/application_helper.rb% then
      functional_tests.push(*Dir['test/functional/test_*.rb'])
    #when %r%^app/helpers/(.*)_helper.rb% then
    #  functional_tests << "test/functional/test_#{$1}s_controller.rb"
    when %r%^test/fixtures/(.*)s.yml% then
      model_tests << "test/unit/test_#{$1}.rb"
      functional_tests << "test/functional/test_#{$1}s_controller.rb"
    when %r%^test/unit/.*rb$% then
      model_tests << filename
    when %r%^test/functional/.*rb$% then
      functional_tests << filename
    when %r%^app/models/(.*)$% then
      model_tests << "test/unit/test_#{$1}"
    when %r%^app/controllers/application.rb$% then
      functional_tests << "test/functional/test_application_controller.rb"
    when %r%^app/controllers/(.*)$% then
      functional_tests << "test/functional/test_#{$1}"
    when %r%^app/views/layouts/% then
    when %r%^app/views/(.*)/% then
      functional_tests << "test/functional/test_#{$1}_controller.rb"
    else
      puts "dunno! #{filename}"
    end
  end

  model_tests.uniq!
  functional_tests.uniq!

  return model_tests, functional_tests
end

def rerun_tests(failed, tests)
  # -t and -n includes all tests that match either filter, not tests that
  # match both filters, so figure out which TestCase to run from the filename,
  # and use -n on that.
  until failed.empty? do
    sleep 10 # this value will need fudging to look right

    failed.map! do |method, klass|
      klass_name = /#{klass.gsub(/(.)([A-Z])/, '\1_\2').downcase}/
      tests = tests.select { |test| test =~ klass_name }
      puts "# Rerunning failures: #{tests.join ' '}"
      filter = "-n #{method} " unless method == 'default_test'
      cmd = "ruby -Ilib:test -S testrb #{filter}#{tests.join ' '}"
      puts "+ #{cmd}"
      system(cmd) ? nil : [method, klass] # clever
    end.compact!
  end
end

epoch = Time.at 0

loop do
  updated = []

  Find.find '.' do |f|
    next if File.directory? f
    next if f =~ %r%^\./(?:script|public|doc|log)%
    mtime = File.stat(f).mtime
    files[f] = epoch unless files.include? f
    updated << f if files[f] < mtime
    files[f] = mtime
  end

  run_tests updated
  sleep 5
end

